{
	"name": "vadar_sentiments",
	"properties": {
		"folder": {
			"name": "Patient Experience"
		},
		"nbformat": 0,
		"nbformat_minor": 0,
		"bigDataPool": {
			"referenceName": "PatientExpTest",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cbadd11e-0445-4ba0-91ab-56abcb4a2860/resourceGroups/rg-advancedcomputingplatform/providers/Microsoft.Synapse/workspaces/syn-advcomptest/bigDataPools/PatientExpTest",
				"name": "PatientExpTest",
				"type": "Spark",
				"endpoint": "https://syn-advcomptest.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PatientExpTest",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "3dc5b50f-e47b-4175-95ff-7d1e9f26b526"
					}
				},
				"source": [
					"import pandas as pd\n",
					"import numpy as np\n",
					"import gc\n",
					"import pickle\n",
					"import matplotlib.pyplot as plt\n",
					"import operator\n",
					"import seaborn as sns\n",
					"from wordcloud import WordCloud,STOPWORDS\n",
					"from collections import Counter\n",
					"from sklearn.model_selection import train_test_split\n",
					"from sklearn.preprocessing import LabelEncoder\n",
					"from sklearn import model_selection,metrics\n",
					"from sklearn.metrics import confusion_matrix\n",
					"from nltk.corpus import stopwords\n",
					"from nltk.tokenize import RegexpTokenizer \n",
					"import time\n",
					"import io\n",
					"from tqdm import tqdm\n",
					"import os, re, csv, math, codecs\n",
					"\n",
					"# coding: utf-8\n",
					"from gensim.models import KeyedVectors\n",
					"from gensim.scripts.glove2word2vec import glove2word2vec\n",
					"from gensim.parsing.preprocessing import remove_stopwords\n",
					"import nltk\n",
					"from nltk.corpus import stopwords\n",
					"from  nltk.stem import SnowballStemmer\n",
					"\n",
					"# pd.set_option('display.max_colwidth', None)\n",
					"# pd.set_option('display.max_rows', 200)"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "37747c3e-fb8c-4ac6-9ac5-0275bf7f9885"
					}
				},
				"source": [
					"import tensorflow as tf  \n",
					"from tensorflow import keras\n",
					"from tensorflow.keras.callbacks import EarlyStopping,ModelCheckpoint\n",
					"from tensorflow.keras.utils import to_categorical\n",
					"from tensorflow.keras.preprocessing.text import Tokenizer\n",
					"from tensorflow.keras.preprocessing.sequence import pad_sequences\n",
					"from tensorflow.keras.layers import Embedding,Conv1D,LSTM,GRU,BatchNormalization,Flatten,Dense"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "5efc6725-7201-4678-b547-9756f9e1f0f1"
					}
				},
				"source": [
					"from tensorflow.keras.models import load_model\n",
					"import pickle\n",
					"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
					"import spacy\n",
					"nlp = spacy.load(\"en_core_web_sm\")\n",
					"sid_obj = SentimentIntensityAnalyzer()"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "b4bb54ac-16e2-4bd0-aa0f-6be0c98c75d3"
					}
				},
				"source": [
					"\n",
					"\n",
					"# Load model\n",
					"model_final = load_model('/dbfs/FileStore/shared_uploads/sowmya.gunda@providence.org/glove100d_model.h5')\n",
					"max_len=1500\n",
					"\n",
					"with open('/dbfs/FileStore/shared_uploads/sowmya.gunda@providence.org/glove100_tokenizer.pickle', 'rb') as handle:\n",
					"    tokenizer_final = pickle.load(handle)\n",
					"    \n",
					"def predict_class(text):\n",
					"    '''Function to predict sentiment class of the passed data'''\n",
					"    max_len=1500\n",
					"    # Transforms text to a sequence of integers using a tokenizer object\n",
					"    xt = tokenizer_final.texts_to_sequences(text)\n",
					"    # Pad sequences to the same length\n",
					"    xt = pad_sequences(xt, maxlen=max_len)\n",
					"    # Do the prediction using the loaded model\n",
					"    yt = model_final.predict(xt).argmax(axis=-1)\n",
					"    return yt"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "2a667b6b-bc8a-4a99-9ab0-3d27cef96428"
					}
				},
				"source": [
					"data=pd.read_csv('/dbfs/FileStore/shared_uploads/sowmya.gunda@providence.org/mPulse/WHS_mPULSE_Survey.csv')\n",
					"data=data[['UNIQUE_SURVEY_ID','Language','Q8','Q11']] #'Q7',,'Q11'\n",
					"data.shape,data.isnull().sum()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "487206a1-9ed0-4598-82b2-07209e22a686"
					}
				},
				"source": [
					"data.loc[data.UNIQUE_SURVEY_ID.isin(['uoYBDf','PsRcxc']),'Language']='English'"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "4dfd6297-040a-4406-90f8-0e7baa68ea71"
					}
				},
				"source": [
					"data['Q8_original']=data['Q8'].apply(lambda x: np.nan if ((x is np.nan) or (''.__eq__(x))) else x.lower().strip())\n",
					"data['Q8']=data['Q8_original'].apply(lambda x: np.nan if ((x is not np.nan) and (x in (['no','none','n/a','na'])) or (x is np.nan) or (''.__eq__(x))) else x)\n",
					"data['Q8_processed']=data['Q8'].apply(lambda s:  ' ' if s is np.nan else s)\n",
					"data.head(2)"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "1853269a-a79e-4cbd-a706-04a047f89a8c"
					}
				},
				"source": [
					"data['Q11_original']=data['Q11'].apply(lambda x: np.nan if ((x is np.nan) or (''.__eq__(x))) else x.lower().strip())\n",
					"data['Q11']=data['Q11_original'].apply(lambda x: np.nan if ((x is not np.nan) and (x in (['no','none','n/a','na'])) or (x is np.nan) or (''.__eq__(x))) else x)\n",
					"data['Q11_processed']=data['Q11'].apply(lambda s:  ' ' if s is np.nan else s)\n",
					"data.head(2)"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "948ef0c7-d07c-48d7-8d34-d47841d01ab4"
					}
				},
				"source": [
					"englishdata_Q8=data.loc[(data.Language!='Spanish')&(~data['Q8'].isnull())]\n",
					"nonenglishdata_Q8=data.loc[(data.Language=='Spanish')|(data['Q8'].isnull())]\n",
					"data.shape,englishdata_Q8.shape,nonenglishdata_Q8.shape,englishdata_Q8.isnull().sum()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "6ddd0020-833a-4e22-a1cd-5da8bab9ac9b"
					}
				},
				"source": [
					"#apply(lambda x: 1 if (x['pos']>=x['neg'] and x['compound']>=0) else 0)\n",
					"def classify_sentiments_compound(sentiment_dict):\n",
					"  if sentiment_dict['compound'] >= 0.05 :\n",
					"      return 1\n",
					"  elif sentiment_dict['compound'] <= - 0.05 :\n",
					"      return 0\n",
					"  else :\n",
					"      return 1"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "93a46759-876b-4514-b6a7-465790d2e577"
					}
				},
				"source": [
					"\n",
					"englishdata_Q8['vader_Sentiment_Q8']=englishdata_Q8['Q8_processed'].apply(lambda x: sid_obj.polarity_scores(x))\n",
					"englishdata_Q8['vader_SentimentPredictedCompound_Q8']=englishdata_Q8['vader_Sentiment_Q8'].apply(lambda x: classify_sentiments_compound(x))\n",
					"\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "ee9be0d5-5f84-46e1-9e03-a74bce26bf97"
					}
				},
				"source": [
					"englishdata_Q11=data.loc[(data.Language!='Spanish')&(~data['Q11'].isnull())]\n",
					"nonenglishdata_Q11=data.loc[(data.Language=='Spanish')|(data['Q11'].isnull())]\n",
					"data.shape,englishdata_Q11.shape,nonenglishdata_Q11.shape,englishdata_Q11.isnull().sum()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "98cfc2cd-e02c-4bac-8d8b-8f8c0fd3e926"
					}
				},
				"source": [
					"\n",
					"englishdata_Q11['vader_Sentiment_Q11']=englishdata_Q11['Q11_processed'].apply(lambda x: sid_obj.polarity_scores(x))\n",
					"englishdata_Q11['vader_SentimentPredictedCompound_Q11']=englishdata_Q11['vader_Sentiment_Q11'].apply(lambda x: classify_sentiments_compound(x))"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "71fb07b9-e167-4c7e-b90d-105ea29f2ed4"
					}
				},
				"source": [
					"nonenglishdata_Q11[['dl_SentimentPredicted_Q11', 'vader_Sentiment_Q11', 'vader_SentimentPredicted_Q11']]='','',''"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "8225a465-9400-4468-a56b-81e84a052b08"
					}
				},
				"source": [
					"combineddata_8=pd.concat([englishdata_Q8,nonenglishdata_Q8])\n",
					"#combineddata_8[['dl_SentimentPredicted_Q11', 'vader_Sentiment_Q11', 'vader_SentimentPredicted_Q11']]='','',''\n",
					"combineddata_11=pd.concat([englishdata_Q11,nonenglishdata_Q11])\n",
					"#combineddata_11[['dl_SentimentPredicted_Q8', 'vader_Sentiment_Q8', 'vader_SentimentPredicted_Q8']]='','',''\n",
					"print(combineddata_8.shape,combineddata_11.shape,\"\\n\",combineddata_8.columns,combineddata_11.columns)"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "42295d30-53bf-41c4-9131-246bfcb0b1d7"
					}
				},
				"source": [
					"finaldf=combineddata_8.merge(combineddata_11,how='inner',on=['UNIQUE_SURVEY_ID', 'Language', 'Q8', 'Q11', 'Q8_original','Q8_processed', 'Q11_original', 'Q11_processed'])\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "958f06d2-d722-4818-9467-f0a164b22a72"
					}
				},
				"source": [
					"finaldf.shape"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "67ce404b-bf28-4e15-bb1c-d077221bd0b7"
					}
				},
				"source": [
					"finaldf=combineddata_8.merge(combineddata_11,how='inner',on=['UNIQUE_SURVEY_ID', 'Language', 'Q8', 'Q11', 'Q8_original','Q8_processed', 'Q11_original', 'Q11_processed'])\n",
					"finaldf.shape,finaldf.head(),finaldf.columns,finaldf.isnull().sum()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "71a72222-0c7b-4c24-9690-28a96ae337c1"
					}
				},
				"source": [
					"from tensorflow.keras.models import load_model\n",
					"import pickle\n",
					"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\n",
					"import spacy\n",
					"nlp = spacy.load(\"en_core_web_sm\")\n",
					"sid_obj = SentimentIntensityAnalyzer()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "e833b11d-8821-46d1-a5db-5cf1e0c3eae0"
					}
				},
				"source": [
					"sentence = \"dr davila bradley is fantastic\"\n",
					"doc = nlp(sentence)"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "a0290d87-823e-4a00-b1e9-fdbc16fb52e5"
					}
				},
				"source": [
					"for token in doc:\n",
					"  print(token, token.pos_, token.dep_)"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "6def2449-4430-4d09-aaff-dd3010c36119"
					}
				},
				"source": [
					"def extract_pos2(sentences,Qno):\n",
					"  positive,negative=[],[]\n",
					"  sentiments={}\n",
					"  pos_sub,neg_sub=[],[]\n",
					"  for sentence in sentences.split('.'):\n",
					"    doc=nlp(sentence)\n",
					"    sentiment=sid_obj.polarity_scores(sentence)\n",
					"     \n",
					"    if (sentiment['pos']>=sentiment['neg'] and sentiment['compound']>=0):sentiment=1\n",
					"    else:sentiment=0\n",
					"      \n",
					"    sent=[]\n",
					"    for token in doc:\n",
					"          if (token.pos_=='ADJ'):\n",
					"              phrase =''\n",
					"              for sub_tok in token.lefts:\n",
					"                  if ((sub_tok.pos_ in (['ADV','PART','VERB']))):\n",
					"                      phrase += sub_tok.text\n",
					"                      if sub_tok.text in sent: sent.remove(sub_tok.text)\n",
					"                      phrase += ' '+token.text \n",
					"                      sent.append(phrase)\n",
					"              if phrase =='':\n",
					"                sent.append(token.text)\n",
					"#           elif token.pos_ in ['ADV']:\n",
					"#             sent.append(token.text)\n",
					"          #if (token.dep_=='nsubj')&(token.is_stop==False):\n",
					"          if (token.pos_ == 'NOUN') or (token.pos_ == 'PROPN'):\n",
					"              if sentiment==1:pos_sub.append(token.text)\n",
					"              else:neg_sub.append(token.text)\n",
					"                \n",
					"    if sentiment==1:positive.extend(sent)\n",
					"    else:negative.extend(sent)\n",
					"      \n",
					"  sentiments['positive'+'_'+Qno]=positive\n",
					"  sentiments['negative'+'_'+Qno]=negative\n",
					"  sentiments['positive_subject'+'_'+Qno]=pos_sub\n",
					"  sentiments['negative_subject'+'_'+Qno]=neg_sub\n",
					"  return sentiments\n",
					"\n",
					"finaldf['vader_sentiments2']=finaldf['Q8_processed'].apply(lambda x: extract_pos2(x,'Q8'))\n",
					"finaldf=pd.concat([finaldf.drop(['vader_sentiments2'], axis=1), finaldf['vader_sentiments2'].apply(pd.Series)], axis=1)\n",
					"\n",
					"finaldf['vader_sentiments2']=finaldf['Q11_processed'].apply(lambda x: extract_pos2(x,'Q11'))\n",
					"finaldf=pd.concat([finaldf.drop(['vader_sentiments2'], axis=1), finaldf['vader_sentiments2'].apply(pd.Series)], axis=1)\n",
					"finaldf.shape,finaldf.columns"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "4a8311b8-483d-4dd7-89ea-df02c31d2c67"
					}
				},
				"source": [
					"finaldf"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "5e6f8d06-5075-4367-b1f1-be49101b9049"
					}
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "03e95815-fe3e-46cd-97e2-8804a3893f85"
					}
				},
				"source": [
					"def combine_values(data,col):\n",
					"  data[col]=data[col].apply(lambda x: \",\".join(x))\n",
					"  return data\n",
					"\n",
					"for col in ['positive_Q8',  'negative_Q8', 'positive_subject_Q8', 'negative_subject_Q8','positive_Q11', 'negative_Q11', 'positive_subject_Q11', 'negative_subject_Q11']:\n",
					"  combine_values(finaldf,col)\n",
					"  \n",
					"finaldf.head()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "7ed002f0-01f4-4041-8b61-be87f5c80b9f"
					}
				},
				"source": [
					"cols=['UNIQUE_SURVEY_ID','Q8', 'Q11', 'positive_Q8', 'vader_SentimentPredictedCompound_Q8', 'vader_SentimentPredictedCompound_Q11',\n",
					"       'negative_Q8', 'positive_subject_Q8', 'negative_subject_Q8',\n",
					"       'positive_Q11', 'negative_Q11', 'positive_subject_Q11', 'negative_subject_Q11']\n",
					"final_result=finaldf[cols]\n",
					"final_result.shape\n",
					"final_result.head()"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "ffde7758-f5d2-4475-8bac-dbf17fb52a45"
					}
				},
				"source": [
					"display(spark.createDataFrame(finaldf.fillna(' ').astype(str)))"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "6c63f802-c00c-4da4-b020-c8395693d864"
					}
				},
				"source": [
					"1+1"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "1b610919-6653-4b82-b18b-ab7d547b139d"
					}
				},
				"source": [
					"def extract_pos_tagger(sentences,Qno):\n",
					"  positive,negative=[],[]\n",
					"  sentiments={}\n",
					"  pos_sub,neg_sub=[],[]\n",
					"  for sentence in sentences.split('.'):\n",
					"    doc=nlp(sentence)\n",
					"    sentiment=sid_obj.polarity_scores(sentence)\n",
					"     \n",
					"    if (sentiment['pos']>=sentiment['neg'] and sentiment['compound']>=0):sentiment=1\n",
					"    else:sentiment=0\n",
					"      \n",
					"    sent=[]\n",
					"    for token in doc:\n",
					"          if (token.pos_=='ADJ'):\n",
					"              phrase =''\n",
					"              for sub_tok in token.lefts:\n",
					"                  if ((sub_tok.pos_ in (['ADV','PART','VERB']))):\n",
					"                      phrase += sub_tok.text\n",
					"                      if sub_tok.text in sent: sent.remove(sub_tok.text)\n",
					"                      phrase += ' '+token.text \n",
					"                      sent.append(phrase)\n",
					"              if phrase =='':\n",
					"                sent.append(token.text)\n",
					"#           elif token.pos_ in ['ADV']:\n",
					"#             sent.append(token.text)\n",
					"          #if (token.dep_=='nsubj')&(token.is_stop==False):\n",
					"          if (token.pos_ == 'NOUN') or (token.pos_ == 'PROPN'):\n",
					"              if sentiment==1:pos_sub.append(token.text)\n",
					"              else:neg_sub.append(token.text)\n",
					"                \n",
					"    if sentiment==1:positive.extend(sent)\n",
					"    else:negative.extend(sent)\n",
					"      \n",
					"  sentiments['positive'+'_'+Qno]=positive\n",
					"  sentiments['negative'+'_'+Qno]=negative\n",
					"  sentiments['positive_subject'+'_'+Qno]=pos_sub\n",
					"  sentiments['negative_subject'+'_'+Qno]=neg_sub\n",
					"  return sentiments\n",
					"\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "c56052ef-f1dc-4908-9f1d-94d5d27fc02f"
					}
				},
				"source": [
					"extract_pos_tagger('dr ahmed is the best. very happy with our appointment.' , 'Q11')\n",
					""
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "9aabcdf7-7ecf-497d-8725-9b57fb885397"
					}
				},
				"source": [
					"tagger  = nlp('dr ahmed is the best. very happy with our appointment.')"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "3e469166-7869-4e86-90b2-e9037824ee39"
					}
				},
				"source": [
					"tagger.ents"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "7032adb9-f93e-4c72-a5f5-75ea196669a5"
					}
				},
				"source": [
					"entity_values = [entity.text for entity in tagger.ents]"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "03d60c29-5595-4629-b09f-3585d754b1bd"
					}
				},
				"source": [
					"entity_values"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "ab818b68-0d93-4420-974e-0cb088da3161"
					}
				},
				"source": [
					"import spacy\n",
					"sp = spacy.load('en_core_web_sm')\n",
					"\n",
					"sen = sp(u'Manchester United is looking to sign Harry Kane for $90 million')"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "3ee0db59-f8b6-4731-bcca-2ffd0706473a"
					}
				},
				"source": [
					"sen.ents"
				],
				"attachments": null,
				"execution_count": 0
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "a7190a71-dc87-43d0-84d2-7bc3f4578855"
					}
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": 0
			}
		]
	}
}