{
	"name": "ExtractProvBusiness",
	"properties": {
		"folder": {
			"name": "Patient Experience"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PatientExp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "Synapse Spark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cbadd11e-0445-4ba0-91ab-56abcb4a2860/resourceGroups/rg-advancedcomputingplatform/providers/Microsoft.Synapse/workspaces/syn-advcomptest/bigDataPools/PatientExp",
				"name": "PatientExp",
				"type": "Spark",
				"endpoint": "https://syn-advcomptest.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PatientExp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"advcompplatsql.dbo.staging_yelp_businesses\") \n",
					"// df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"df.createOrReplaceTempView(\"temp_business\")"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"-- select business_id, name, categories, city, state, postal_code, latitude, longitude, stars from temp_business where name like '%Providence%' or name like '%Swedish Medical%' or name like '%Swedish Mill Creek%' or name like '%Kadlec Regional Medical Center%' or name like '%Grace Medical Center%' or name like 'CHOC at Mission' or name like 'Mission Medial Center' or name like '%St. Joseph%Hospital%' or name like '%Covenant%Hospital%' and categories NOT like 'Financial Services%' and categories NOT like 'Racing Experience%' and categories NOT like 'Venues & Event Spaces%' and categories NOT like 'Arts & Entertainment%' and categories NOT like 'Golf%' and categories NOT like 'Home Services%' \r\n",
					"SELECT business_id\r\n",
					"\t,name\r\n",
					"\t,categories\r\n",
					"\t,city\r\n",
					"\t,STATE\r\n",
					"\t,postal_code\r\n",
					"\t,latitude\r\n",
					"\t,longitude\r\n",
					"\t,stars\r\n",
					"FROM temp_business\r\n",
					"WHERE (\r\n",
					"\t\tname NOT LIKE 'Providence Golf & Country Club'\r\n",
					"\t\tAND name NOT LIKE 'Providence Park'\r\n",
					"\t\tAND name NOT LIKE 'The Providence Group'\r\n",
					"\t\tAND name NOT LIKE 'Providence Academy'\r\n",
					"        AND name NOT LIKE 'Providence Bridge Pedal'\r\n",
					"\t\t)\r\n",
					"\tAND (\r\n",
					"\t\tname LIKE '%Providence%'\r\n",
					"\t\tOR name LIKE '%Swedish Medical%'\r\n",
					"\t\tOR name LIKE '%Swedish Mill Creek%'\r\n",
					"\t\tOR name LIKE '%Kadlec Regional Medical Center%'\r\n",
					"\t\tOR name LIKE '%Grace Medical Center%'\r\n",
					"\t\tOR name LIKE 'CHOC at Mission'\r\n",
					"\t\tOR name LIKE 'Mission Medical Center'\r\n",
					"\t\tOR name LIKE '%St. Joseph%Hospital%'\r\n",
					"        OR name LIKE '%St. Jude Medical%'\r\n",
					"        OR name LIKE '%St. Mary Medical%'\r\n",
					"\t\tOR name LIKE '%Covenant%Hospital%'\r\n",
					"        OR name LIKE '%Petaluma Valley Hospital%'\r\n",
					"        OR name LIKE '%Queen of the Valley Medical Center%'\r\n",
					"        OR name LIKE '%Redwood Memorial Hospital%'\r\n",
					"        OR name LIKE '%Santa Rosa Memorial Hospital%'\r\n",
					"        OR name LIKE '%Willow Creek Clinic%'\r\n",
					"\t\t)"
				],
				"attachments": null,
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"val new_df = spark.sql(\"SELECT business_id,name,categories,city,STATE,postal_code,latitude,longitude,stars FROM temp_business WHERE(name NOT LIKE 'Providence Golf & Country Club' AND name NOT LIKE 'Providence Park' AND name NOT LIKE 'The Providence Group' AND name NOT LIKE 'Providence Academy' AND name NOT LIKE 'Providence Bridge Pedal')\tAND (name LIKE '%Providence%' OR name LIKE '%Swedish Medical%' OR name LIKE '%Swedish Mill Creek%'\tOR name LIKE '%Kadlec Regional Medical Center%'\tOR name LIKE '%Grace Medical Center%' OR name LIKE 'CHOC at Mission' OR name LIKE 'Mission Medical Center' OR name LIKE '%St. Joseph%Hospital%' OR name LIKE '%St. Jude Medical%' OR name LIKE '%St. Mary Medical%' OR name LIKE '%Covenant%Hospital%' OR name LIKE '%Petaluma Valley Hospital%' OR name LIKE '%Queen of the Valley Medical Center%' OR name LIKE '%Redwood Memorial Hospital%' OR name LIKE '%Santa Rosa Memorial Hospital%' OR name LIKE '%Willow Creek Clinic%') \")"
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"new_df.write.sqlanalytics(\"advcompplatsql.dbo.DimFacilities\", Constants.INTERNAL)\r\n",
					"// Constants.INTERNAL - Managed table in dedicated SQL pool\r\n",
					"// Constants.EXTERNAL - External table in dedicated SQL pool"
				],
				"attachments": null,
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}