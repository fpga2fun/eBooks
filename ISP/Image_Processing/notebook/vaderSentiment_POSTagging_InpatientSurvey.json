{
	"name": "vaderSentiment_POSTagging_InpatientSurvey",
	"properties": {
		"folder": {
			"name": "Patient Experience"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "PatientExp",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/cbadd11e-0445-4ba0-91ab-56abcb4a2860/resourceGroups/rg-advancedcomputingplatform/providers/Microsoft.Synapse/workspaces/syn-advcomptest/bigDataPools/PatientExp",
				"name": "PatientExp",
				"type": "Spark",
				"endpoint": "https://syn-advcomptest.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/PatientExp",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "scala"
					}
				},
				"source": [
					"%%spark\n",
					"val df = spark.read.sqlanalytics(\"advcompplatsql.dbo.StagingIN_PATIENT_SURVEY\") \n",
					"// df.write.mode(\"overwrite\").saveAsTable(\"default.t1\")"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"df.createOrReplaceTempView(\"temp_inpatient_survey\")"
				],
				"attachments": null,
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df = spark.sql(\"select * from temp_inpatient_survey\")"
				],
				"attachments": null,
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from tensorflow.keras.models import load_model\r\n",
					"import re\r\n",
					"import pickle\r\n",
					"from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\r\n",
					"import pandas as pd\r\n",
					"import spacy\r\n",
					"import numpy as np\r\n",
					"spacy_obj = spacy.load(\"en_core_web_sm\")\r\n",
					"sid_obj = SentimentIntensityAnalyzer()\r\n",
					""
				],
				"attachments": null,
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df = py_df[['SURVEYID', 'SECTADMI','SECTDISC','SECTHOSP','SECTMEAL','SECTNURS','SECTOVER','SECTPHYS','SECTROOM','SECTTNT']]"
				],
				"attachments": null,
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df = py_df.toPandas()"
				],
				"attachments": null,
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def remove_stop_words(tokens):\r\n",
					"    stopwordslist= ['','a', 'an','am', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\r\n",
					"    words = [item for item in tokens if item not in stopwordslist]\r\n",
					"    return words\r\n",
					"\r\n",
					"def words_cleaner(word):\r\n",
					"  word = re.sub('[^a-zA-Z0-9 \\n\\.]', '', word)\r\n",
					"  return word"
				],
				"attachments": null,
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def extract_pos_tagger(sentences, col_name):\r\n",
					"  positive,negative=[],[]\r\n",
					"  sentiments={}\r\n",
					"  pos_sub,neg_sub=[],[]\r\n",
					"  for sentence in sentences.split('.'):\r\n",
					"    doc=spacy_obj(sentence)\r\n",
					"    sentiment=sid_obj.polarity_scores(sentence)\r\n",
					"    if (sentiment['pos']>=sentiment['neg'] and sentiment['compound']>=0):sentiment=1\r\n",
					"    else:sentiment=0\r\n",
					"      \r\n",
					"    sent=[]\r\n",
					"    for token in doc:\r\n",
					"      if (token.pos_=='ADJ'):\r\n",
					"        phrase =''\r\n",
					"        for sub_tok in token.lefts:\r\n",
					"          if ((sub_tok.pos_ in (['ADV','PART','VERB']))):\r\n",
					"            phrase += sub_tok.text\r\n",
					"            if sub_tok.text in sent: sent.remove(sub_tok.text)\r\n",
					"            phrase += ' '+token.text \r\n",
					"            sent.append(phrase)\r\n",
					"          if phrase =='':\r\n",
					"            sent.append(token.text)\r\n",
					"#           elif token.pos_ in ['ADV']:\r\n",
					"#             sent.append(token.text)\r\n",
					"          #if (token.dep_=='nsubj')&(token.is_stop==False):\r\n",
					"      if (token.pos_ == 'NOUN') or (token.pos_ == 'PROPN'):\r\n",
					"        if sentiment==1: \r\n",
					"          pos_sub.append(words_cleaner(token.text))\r\n",
					"        else:\r\n",
					"          neg_sub.append(words_cleaner(token.text))\r\n",
					"                \r\n",
					"    if sentiment==1:positive.extend(sent)\r\n",
					"    else:negative.extend(sent)\r\n",
					"      \r\n",
					"  sentiments['positive' + col_name]=positive\r\n",
					"  sentiments['negative' + col_name]=negative\r\n",
					"  sentiments['positive_subject' + col_name] = remove_stop_words(pos_sub)\r\n",
					"  sentiments['negative_subject' + col_name]= remove_stop_words(neg_sub)\r\n",
					"  return sentiments\r\n",
					"\r\n",
					""
				],
				"attachments": null,
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"def classify_sentiments_compound(sentiment_dict):\r\n",
					"    if sentiment_dict['compound'] >= 0.05 :\r\n",
					"        return 1\r\n",
					"    elif sentiment_dict['compound'] <= - 0.05 :\r\n",
					"        return 0\r\n",
					"    else :\r\n",
					"        return 1"
				],
				"attachments": null,
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df.shape,py_df.isnull().sum()"
				],
				"attachments": null,
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df = py_df.replace(np.nan, '', regex=True)"
				],
				"attachments": null,
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"col_names= ['SECTADMI','SECTDISC','SECTHOSP','SECTMEAL','SECTNURS','SECTOVER','SECTPHYS','SECTROOM','SECTTNT']\r\n",
					"\r\n",
					"for i in col_names:\r\n",
					"    py_df['vader_Sentiment'+ '_' + i]=py_df[i].apply(lambda x: sid_obj.polarity_scores(x))\r\n",
					"    py_df['vader_SentimentPredictedCompound'+ '_' + i]=py_df['vader_Sentiment' + '_' + i].apply(lambda x: classify_sentiments_compound(x))"
				],
				"attachments": null,
				"execution_count": 15
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"# col_names= ['SECTADMI','SECTDISC','SECTHOSP','SECTMEAL','SECTNURS','SECTOVER','SECTPHYS','SECTROOM','SECTTNT']\r\n",
					"\r\n",
					"# for i in col_names:\r\n",
					"#     py_df['POS' + '_' + i] = py_df[i].apply(lambda x: extract_pos_tagger(x, i))\r\n",
					"#     py_df=pd.concat([py_df.drop(['POS' + '_' + i], axis=1), py_df['POS' + '_' + i].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTADMI'] = py_df['SECTADMI'].apply(lambda x: extract_pos_tagger(x, 'SECTADMI'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTADMI'], axis=1), py_df['POS' + '_' + 'SECTADMI'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 17
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTDISC'] = py_df['SECTDISC'].apply(lambda x: extract_pos_tagger(x, 'SECTDISC'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTDISC'], axis=1), py_df['POS' + '_' + 'SECTDISC'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 18
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTHOSP'] = py_df['SECTHOSP'].apply(lambda x: extract_pos_tagger(x, 'SECTHOSP'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTHOSP'], axis=1), py_df['POS' + '_' + 'SECTHOSP'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 19
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTMEAL'] = py_df['SECTMEAL'].apply(lambda x: extract_pos_tagger(x, 'SECTMEAL'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTMEAL'], axis=1), py_df['POS' + '_' + 'SECTMEAL'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTNURS'] = py_df['SECTNURS'].apply(lambda x: extract_pos_tagger(x, 'SECTNURS'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTNURS'], axis=1), py_df['POS' + '_' + 'SECTNURS'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 22
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTOVER'] = py_df['SECTOVER'].apply(lambda x: extract_pos_tagger(x, 'SECTOVER'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTOVER'], axis=1), py_df['POS' + '_' + 'SECTOVER'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 23
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTPHYS'] = py_df['SECTPHYS'].apply(lambda x: extract_pos_tagger(x, 'SECTPHYS'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTPHYS'], axis=1), py_df['POS' + '_' + 'SECTPHYS'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 25
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTROOM'] = py_df['SECTROOM'].apply(lambda x: extract_pos_tagger(x, 'SECTROOM'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTROOM'], axis=1), py_df['POS' + '_' + 'SECTROOM'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df['POS' + '_' + 'SECTTNT'] = py_df['SECTTNT'].apply(lambda x: extract_pos_tagger(x, 'SECTTNT'))\r\n",
					"py_df=pd.concat([py_df.drop(['POS' + '_' + 'SECTTNT'], axis=1), py_df['POS' + '_' + 'SECTTNT'].apply(pd.Series)], axis=1)"
				],
				"attachments": null,
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"drop_columns = ['SECTADMI','SECTDISC','SECTHOSP','SECTMEAL','SECTNURS','SECTOVER','SECTPHYS','SECTROOM','SECTTNT', 'vader_Sentiment_SECTADMI', 'vader_Sentiment_SECTDISC', 'vader_Sentiment_SECTHOSP', 'vader_Sentiment_SECTMEAL', 'vader_Sentiment_SECTNURS', 'vader_Sentiment_SECTOVER', 'vader_Sentiment_SECTPHYS', 'vader_Sentiment_SECTROOM', 'vader_Sentiment_SECTTNT']\r\n",
					"py_df_without_reviews = py_df.drop(drop_columns, axis=1)"
				],
				"attachments": null,
				"execution_count": 33
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"for i in py_df_without_reviews.columns:\r\n",
					"    py_df_without_reviews[i] = py_df_without_reviews[i].astype(str)\r\n",
					"    py_df_without_reviews[i] = py_df_without_reviews[i].str.replace('[','')\r\n",
					"    py_df_without_reviews[i] = py_df_without_reviews[i].str.replace(']','')\r\n",
					"    py_df_without_reviews[i] = py_df_without_reviews[i].str.replace('\\'','')\r\n",
					"py_df_without_reviews\r\n",
					"    "
				],
				"attachments": null,
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"py_df_without_reviews = py_df_without_reviews.replace('', np.nan, regex=True)"
				],
				"attachments": null,
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"names = ['vader_SentimentPredictedCompound_SECTADMI',\r\n",
					"       'vader_SentimentPredictedCompound_SECTDISC',\r\n",
					"       'vader_SentimentPredictedCompound_SECTHOSP',\r\n",
					"       'vader_SentimentPredictedCompound_SECTMEAL',\r\n",
					"       'vader_SentimentPredictedCompound_SECTNURS',\r\n",
					"       'vader_SentimentPredictedCompound_SECTOVER',\r\n",
					"       'vader_SentimentPredictedCompound_SECTPHYS',\r\n",
					"       'vader_SentimentPredictedCompound_SECTROOM',\r\n",
					"       'vader_SentimentPredictedCompound_SECTTNT']\r\n",
					"\r\n",
					"for i in names:\r\n",
					"    py_df_without_reviews[i] = py_df_without_reviews[i].astype(int)"
				],
				"attachments": null,
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark_df = spark.createDataFrame(py_df_without_reviews.astype(str))"
				],
				"attachments": null,
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"spark_df.createOrReplaceTempView(\"temp\")"
				],
				"attachments": null,
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"val new_df = spark.sql(\"select * from temp\")"
				],
				"attachments": null,
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "scala"
					},
					"collapsed": true
				},
				"source": [
					"%%spark\r\n",
					"new_df.write.sqlanalytics(\"advcompplatsql.dbo.Inpatient_Sentiments_POSTagging\", Constants.INTERNAL)"
				],
				"attachments": null,
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					""
				],
				"attachments": null,
				"execution_count": null
			}
		]
	}
}